{"data":{"site":{"siteMetadata":{"title":"Electric Sheep Blog","author":"takeshiino21","homepage":"https://github.com/t-keshi-inoue"}},"post":{"id":"18763329-cf17-5a2a-b3c9-5c1227b58c9a","html":"<h2>git commit -m “ここに何を書いたらいいのか”</h2>\n<p>人によってまちまちのコミットメッセージ　＝＞　困る\n一定のルールをコミットメッセージに設けたら良いのではないか。</p>\n<h2>それの何がおいしいのか？</h2>\n<p>個人開発で使うメリットとしては、git rebaseするときにどこまで戻ったらいいのかすぐわかるのがデカい。\nチーム開発だったら、プロダクトの進捗がコミットを見れば、簡単に振り返羅れるようになるだろう。</p>\n<h2>提案：プレフィックスを加える</h2>\n<p>下記は<a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#type\">Angularのガイド</a>をざっくりで訳したもの。（間違ってたら教えてください。）</p>\n<ul>\n<li>feat: 新しい機能を付け加えたとき</li>\n<li>fix: バグを直したとき</li>\n<li>docs: (機能ではなく)単に文章を足しただけのとき</li>\n<li>style: ロジックに関わる部分ではなく、コードの見た目の問題を修正したとき</li>\n<li>refactor: バグ修正でも機能追加でもないコードの変更、要するにリファクタリングをしたとき</li>\n<li>perf: パーフォーマンス向上のためにコードを変更したとき</li>\n<li>test: REDの段階やGREENの段階のテストコードを追加したとき</li>\n<li>chore: ライブラリやツールを導入したとき</li>\n</ul>\n<h2>後書き</h2>\n<p>個人的にはfeatでミスとかが起こっている場合が多いから、featの前まで戻ることが多いかも。\nこの手法だと、新しいコードの追加と既存のコードの修正は、別々のコミットで行わなくてはいけないわけで、\nしたがって要所要所、いい感じのポイントでコミットが入れられる。</p>\n<p>細かく分けすぎてもダメ、大きすぎるのもダメ。色々と難しいコミット。\nまずは上記のルールを取り入れて、コミット力を上げてみてはいかがだろうか。</p>\n<p>今日はここまで！</p>","frontmatter":{"title":"コミットメッセージ","path":"/post16/","images":["images/1.png"],"category":"other","tags":["test"],"date":"2019-11-15T00:00:00.000Z","components":null,"tweets":null,"summary":"commit -m そのあとは如何に"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}