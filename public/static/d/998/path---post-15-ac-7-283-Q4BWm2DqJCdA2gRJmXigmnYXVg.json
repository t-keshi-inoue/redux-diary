{"data":{"site":{"siteMetadata":{"title":"Electric Sheep Blog","author":"takeshiino21","homepage":"https://github.com/t-keshi-inoue"}},"post":{"id":"617e9ac1-87fa-5c45-9598-38596b321e94","html":"<h2>なんでテストをするの?</h2>\n<p>A.品質の確保のため<br>\nだって稼働中のサービスが思わぬ理由で止まったりしたら、怖くないですか？\n駆け出しの頃に「本番環境でやらかした件」みたいなエピソードを聞いたことありますが、\n聞いてるだけで冷や汗が出るような怖い話でした。</p>\n<h2>テストコードを書くと何がいいの？</h2>\n<p>メリット：</p>\n<ul>\n<li>1.テストを自動化できる</li>\n<li>2.リファクタリングがしやすい</li>\n<li>3.他人から見たときに機能がわかりやすい</li>\n</ul>\n<p>ちょっと書き直す度に、いろんなところをクリックしてみるなど、\nアナログな方法でテストをするのは結構手間だったりします。\n一回テストを書いておけば楽ちんだね！って話。\n加えて、3 番目が意外にデカくて、リーダブルなコードという観点でもテストコードは重要です。\n先にテストコードを覗いておけば、どんなプログラムなのかざっくり概要がわかるというメリット is ある。</p>\n<h2>んで、結局テスト駆動開発って?</h2>\n<p><strong>Test Driven Development そいつを略して TDD-</strong>\nざっくり言うと、テストコードから先に書くっていうプログラミングの手法。</p>\n<ul>\n<li>RED</li>\n<li>GREEN</li>\n<li>REFACTOR\nの 3 つの STEP で構成される。\n（REFACTOR については、BLUE じゃねぇのかよっとツッコミを入れたくもなる。）\nまず、先にテストコードを書くと、必ずエラーが出る。（レッドの段階）\n「こうなるはず」っていう結果だけを書いて、過程がないみたいな感じ。\nそして GREEN の段階でエラーを潰していくように、実際のコードを書いていく。\n最後に REFACTOR でコードをさらに明快かつ簡潔なものに直していく。</li>\n</ul>\n<br/>\n<p>こう書くと思いの外、シンプルで理解しやすい手法ではないだろうか。\n良いエンジニアになるためにはテストコードを必ず書くようにしろ、\nという遥か古より引き継がれし言伝えもあるので、これを機会にテストコードを初めてみようかな。\n今日は以上！</p>","frontmatter":{"title":"TDDが面白い件","path":"/post15/","images":["images/4.png"],"category":"other","tags":["test"],"date":"2019-11-12T00:00:00.000Z","components":null,"tweets":null,"summary":"テスト駆動開発とは"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}